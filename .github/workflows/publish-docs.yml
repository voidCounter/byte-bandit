name: Test and Deploy Docs
on:
  push:
    branches:
      - '**'
    paths:
      - 'docs/**'
  pull_request:
    branches:
      - '**'
    paths:
      - 'docs/**'
jobs:
  test-docs:
    name: Test and Lint Docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Ensure `docs/` exists
        run: |
          if [ ! -d "docs" ]; then
            echo "::error::The 'docs/' folder is missing. This workflow requires documentation to be present."
            exit 1
          fi
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install MkDocs and Dependencies
        working-directory: docs
        run: pip install -r requirements.txt
        # To check for broken links in the documentation
      - name: Install markdown-link-check
        run: npm install -g markdown-link-check
        # To check for typos in the documentation
      - name: Install codespell
        run: pip install codespell
      - name: Install markdownlint-cli
        run: npm install -g markdownlint-cli
      - name: Check Markdown Links
        working-directory: docs
        run: find . -name "*.md" | xargs markdown-link-check
      - name: Check for Typos
        run: codespell --ignore-words-list="nd" --skip="docs/site/*" -- *.md docs/**/*.md
      - name: Run Markdown Lint and Format Output
        run: |
          npx markdownlint-cli "docs/**/*.md" || true
          echo "::warning::Markdown linting completed with warnings."
      - name: Validate MkDocs Configuration
        working-directory: docs
        run: mkdocs build --strict
      - name: upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mkdocs-site
          path: docs/site

  deploy-docs:
    name: Deploy Docs to Vercel
    needs: test-docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: mkdocs-site
          path: docs/site
      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Determine environment
        id: vars
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "ENVIRONMENT=production" >> $GITHUB_ENV
              echo "DEPLOY_PROD=true" >> $GITHUB_ENV
          else
              echo "ENVIRONMENT=preview" >> $GITHUB_ENV
              echo "DEPLOY_PROD=false" >> $GITHUB_ENV
          fi
      - name: Remove .vercel directory
        working-directory: docs/site
        run: rm -rf .vercel
      - name: Link Vercel Project
        working-directory: docs/site
        env:
            VERCEL_PROJECT_ID: ${{ secrets.VERCEL_DOC_PROJECT_ID}}
            VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
            VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: vercel link --yes --project $VERCEL_PROJECT_ID --token $VERCEL_TOKEN
      - name: Deploy to Vercel
        working-directory: docs/site
        env:
            VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          if [[ "${{ env.DEPLOY_PROD }}" == "true" ]]; then
              echo "Deploying to production (main branch)..."
              vercel deploy --prod --token $VERCEL_TOKEN --yes
          else
              echo "Deploying to preview for branch: ${{ github.ref }}"
              vercel deploy --token $VERCEL_TOKEN --yes
          fi
