services:
  discovery-server:
    image: oakcan/discovery-server:latest
    container_name: oakcan-discovery-server
    profiles:
      - core
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
  config-server:
    image: oakcan/config-server:latest
    container_name: oakcan-config-server
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
    profiles:
      - core
    ports:
      - "8071:8071"
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8071/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      discovery-server:
        condition: service_healthy
  gateway:
    image: oakcan/gateway:latest
    container_name: oakcan-gateway
    profiles:
      - core
    ports:
      - "8084:8084"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - USER_DEV_DB_URL=jdbc:postgresql://user-dev-db:5432/user-dev-db
      - GOOGLE_OAUTH_CLIENT_ID=${GOOGLE_OAUTH_CLIENT_ID}
      - GOOGLE_OAUTH_CLIENT_SECRET=${GOOGLE_OAUTH_CLIENT_SECRET}
      - GOOGLE_OAUTH_REDIRECT_URI=${GOOGLE_OAUTH_REDIRECT_URI}
      - GOOGLE_OAUTH_TOKEN_ENDPOINT=${GOOGLE_OAUTH_TOKEN_ENDPOINT}
      - GOOGLE_OAUTH_USERINFO_ENDPOINT=${GOOGLE_OAUTH_USERINFO_ENDPOINT}
      - DEV_CLIENT_HOST_URI=${DEV_CLIENT_HOST_URI}
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8084/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      user-dev-db:
        condition: service_healthy
  file-service:
    image: oakcan/file-service:latest
    container_name: oakcan-file-service
    profiles:
      - core
    ports:
      - "8081:8081"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - BUCKET_NAME=${BUCKET_NAME}
      - SQS_QUEUE_URL=${SQS_QUEUE_URL}
      - FILE_DEV_DB_URL=jdbc:postgresql://file-dev-db:5432/file-dev-db
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      file-dev-db:
        condition: service_healthy
      gateway:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
  user-service:
    image: oakcan/user-service:latest
    container_name: oakcan-user-service
    profiles:
      - core
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - USER_DEV_DB_URL=jdbc:postgresql://user-dev-db:5432/user-dev-db
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DEV_MAIL_HOST=mailhog
      - DEV_MAIL_PORT=1025
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      gateway:
        condition: service_healthy
      mailhog:
        condition: service_healthy
      user-dev-db:
        condition: service_healthy
  user-dev-db:
    image: postgres:17-alpine
    container_name: user-dev-db
    volumes:
      - user-dev-db-data:/var/lib/postgresql/data
    profiles:
      - infra
    ports:
      - "15432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=user-dev-db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 500m
  file-dev-db:
    image: postgres:17-alpine
    container_name: file-dev-db
    volumes:
      - file-dev-db-data:/var/lib/postgresql/data
    profiles:
      - infra
    ports:
      - "15532:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=file-dev-db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 500m
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    profiles:
      - infra
    ports:
      - "1025:1025"
      - "8025:8025"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8025" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    profiles:
      - infra
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    profiles:
      - infra
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "29092:29092"

  client:
    image: oakcan/client:latest
    container_name: oakcan-client
    profiles:
      - core
    build:
      context: ./apps/web
    ports:
      - "3000:3000"
  docs:
    image: oakcan/docs:latest
    container_name: oakcan-docs
    profiles:
      - core
    build:
      context: docs
    ports:
      - "8000:8000"
volumes:
  user-dev-db-data:
    driver: local
  file-dev-db-data:
    driver: local